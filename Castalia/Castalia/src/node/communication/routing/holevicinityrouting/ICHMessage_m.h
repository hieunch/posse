//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/holevicinityrouting/ICHMessage.msg.
//

#ifndef _ICHMESSAGE_M_H_
#define _ICHMESSAGE_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    #include "GeoMathHelper.h"
    #include "RoutingPacket_m.h"
    typedef std::vector<Point> PointVector;
    typedef std::vector<double> doubleVector;
// }}

/**
 * Enum generated from <tt>src/node/communication/routing/holevicinityrouting/ICHMessage.msg:13</tt> by nedtool.
 * <pre>
 * enum RollingBallForwardingMode
 * {
 * 
 *     GREEDY_ROUTING = 0;
 *     ROLLINGBALL_ROUTING = 1;
 * }
 * </pre>
 */
enum RollingBallForwardingMode {
    GREEDY_ROUTING = 0,
    ROLLINGBALL_ROUTING = 1
};

/**
 * Enum generated from <tt>src/node/communication/routing/holevicinityrouting/ICHMessage.msg:18</tt> by nedtool.
 * <pre>
 * enum RollingBallPacketDef
 * {
 * 
 *     ROLLINGBALL_DATA_PACKET = 0;       // data packet
 * }
 * </pre>
 */
enum RollingBallPacketDef {
    ROLLINGBALL_DATA_PACKET = 0
};

/**
 * Class generated from <tt>src/node/communication/routing/holevicinityrouting/ICHMessage.msg:22</tt> by nedtool.
 * <pre>
 * packet ICHDataPacket extends RoutingPacket
 * {
 *     int packetId;
 *     Point sourceLocation;
 *     Point destLocation;
 *     Point anchor;
 *     unsigned int apIndex; //index of anchor point in shortest path from source to destination
 *     Point homotheticCenter;
 *     PointVector homotheticArray;
 *     double scaleFactor;
 *     doubleVector scaleFactorArray;
 *     PointVector shortestPath;
 * 
 *     int RollingBallPacketKind @enum(RollingBallPacketDef);
 *     int routingMode @enum(RollingBallForwardingMode);
 *     Point stuckLocation;
 *     Point ballCenter;
 *     Point previousLocation;
 * }
 * </pre>
 */
class ICHDataPacket : public ::RoutingPacket
{
  protected:
    int packetId_var;
    Point sourceLocation_var;
    Point destLocation_var;
    Point anchor_var;
    unsigned int apIndex_var;
    Point homotheticCenter_var;
    PointVector homotheticArray_var;
    double scaleFactor_var;
    doubleVector scaleFactorArray_var;
    PointVector shortestPath_var;
    int RollingBallPacketKind_var;
    int routingMode_var;
    Point stuckLocation_var;
    Point ballCenter_var;
    Point previousLocation_var;

  private:
    void copy(const ICHDataPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ICHDataPacket&);

  public:
    ICHDataPacket(const char *name=NULL, int kind=0);
    ICHDataPacket(const ICHDataPacket& other);
    virtual ~ICHDataPacket();
    ICHDataPacket& operator=(const ICHDataPacket& other);
    virtual ICHDataPacket *dup() const {return new ICHDataPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getPacketId() const;
    virtual void setPacketId(int packetId);
    virtual Point& getSourceLocation();
    virtual const Point& getSourceLocation() const {return const_cast<ICHDataPacket*>(this)->getSourceLocation();}
    virtual void setSourceLocation(const Point& sourceLocation);
    virtual Point& getDestLocation();
    virtual const Point& getDestLocation() const {return const_cast<ICHDataPacket*>(this)->getDestLocation();}
    virtual void setDestLocation(const Point& destLocation);
    virtual Point& getAnchor();
    virtual const Point& getAnchor() const {return const_cast<ICHDataPacket*>(this)->getAnchor();}
    virtual void setAnchor(const Point& anchor);
    virtual unsigned int getApIndex() const;
    virtual void setApIndex(unsigned int apIndex);
    virtual Point& getHomotheticCenter();
    virtual const Point& getHomotheticCenter() const {return const_cast<ICHDataPacket*>(this)->getHomotheticCenter();}
    virtual void setHomotheticCenter(const Point& homotheticCenter);
    virtual PointVector& getHomotheticArray();
    virtual const PointVector& getHomotheticArray() const {return const_cast<ICHDataPacket*>(this)->getHomotheticArray();}
    virtual void setHomotheticArray(const PointVector& homotheticArray);
    virtual double getScaleFactor() const;
    virtual void setScaleFactor(double scaleFactor);
    virtual doubleVector& getScaleFactorArray();
    virtual const doubleVector& getScaleFactorArray() const {return const_cast<ICHDataPacket*>(this)->getScaleFactorArray();}
    virtual void setScaleFactorArray(const doubleVector& scaleFactorArray);
    virtual PointVector& getShortestPath();
    virtual const PointVector& getShortestPath() const {return const_cast<ICHDataPacket*>(this)->getShortestPath();}
    virtual void setShortestPath(const PointVector& shortestPath);
    virtual int getRollingBallPacketKind() const;
    virtual void setRollingBallPacketKind(int RollingBallPacketKind);
    virtual int getRoutingMode() const;
    virtual void setRoutingMode(int routingMode);
    virtual Point& getStuckLocation();
    virtual const Point& getStuckLocation() const {return const_cast<ICHDataPacket*>(this)->getStuckLocation();}
    virtual void setStuckLocation(const Point& stuckLocation);
    virtual Point& getBallCenter();
    virtual const Point& getBallCenter() const {return const_cast<ICHDataPacket*>(this)->getBallCenter();}
    virtual void setBallCenter(const Point& ballCenter);
    virtual Point& getPreviousLocation();
    virtual const Point& getPreviousLocation() const {return const_cast<ICHDataPacket*>(this)->getPreviousLocation();}
    virtual void setPreviousLocation(const Point& previousLocation);
};

inline void doPacking(cCommBuffer *b, ICHDataPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ICHDataPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _ICHMESSAGE_M_H_

