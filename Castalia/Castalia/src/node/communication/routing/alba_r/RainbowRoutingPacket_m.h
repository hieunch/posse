//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/alba-r/RainbowRoutingPacket.msg.
//

#ifndef _RAINBOWROUTINGPACKET_M_H_
#define _RAINBOWROUTINGPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "RoutingPacket_m.h"
#include "GeoMathHelper.h"
// }}

/**
 * Enum generated from <tt>src/node/communication/routing/alba-r/RainbowRoutingPacket.msg:12</tt> by nedtool.
 * <pre>
 * enum RainbowPacketDef
 * {
 * 
 *     RAINBOW_DATA_PACKET = 0;       // data packet
 * }
 * </pre>
 */
enum RainbowPacketDef {
    RAINBOW_DATA_PACKET = 0
};

/**
 * Class generated from <tt>src/node/communication/routing/alba-r/RainbowRoutingPacket.msg:16</tt> by nedtool.
 * <pre>
 * packet RainbowPacket extends RoutingPacket
 * {
 *     int packetId;
 *     int RainbowPacketKind @enum(RainbowPacketDef);
 *     Point destLocation;
 * }
 * </pre>
 */
class RainbowPacket : public ::RoutingPacket
{
  protected:
    int packetId_var;
    int RainbowPacketKind_var;
    Point destLocation_var;

  private:
    void copy(const RainbowPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RainbowPacket&);

  public:
    RainbowPacket(const char *name=NULL, int kind=0);
    RainbowPacket(const RainbowPacket& other);
    virtual ~RainbowPacket();
    RainbowPacket& operator=(const RainbowPacket& other);
    virtual RainbowPacket *dup() const {return new RainbowPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getPacketId() const;
    virtual void setPacketId(int packetId);
    virtual int getRainbowPacketKind() const;
    virtual void setRainbowPacketKind(int RainbowPacketKind);
    virtual Point& getDestLocation();
    virtual const Point& getDestLocation() const {return const_cast<RainbowPacket*>(this)->getDestLocation();}
    virtual void setDestLocation(const Point& destLocation);
};

inline void doPacking(cCommBuffer *b, RainbowPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, RainbowPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _RAINBOWROUTINGPACKET_M_H_

