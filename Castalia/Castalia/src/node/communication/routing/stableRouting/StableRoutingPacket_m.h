//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/stableRouting/StableRoutingPacket.msg.
//

#ifndef _STABLEROUTINGPACKET_M_H_
#define _STABLEROUTINGPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "RoutingPacket_m.h"
#include "GeoMathHelper.h"
typedef std::vector<Point> PointVector;
typedef std::vector<CavernNode> Cavern;
typedef std::vector<Cavern> CavernVector;
// }}

/**
 * Enum generated from <tt>src/node/communication/routing/stableRouting/StableRoutingPacket.msg:18</tt> by nedtool.
 * <pre>
 * enum StablePacketDef
 * {
 * 
 *     STABLE_DATA_PACKET = 0;       // data packet
 * }
 * </pre>
 */
enum StablePacketDef {
    STABLE_DATA_PACKET = 0
};

/**
 * Enum generated from <tt>src/node/communication/routing/stableRouting/StableRoutingPacket.msg:22</tt> by nedtool.
 * <pre>
 * enum RollingBallForwardingMode
 * {
 * 
 *     GREEDY_ROUTING = 0;
 *     ROLLINGBALL_ROUTING = 1;
 * }
 * </pre>
 */
enum RollingBallForwardingMode {
    GREEDY_ROUTING = 0,
    ROLLINGBALL_ROUTING = 1
};

/**
 * Class generated from <tt>src/node/communication/routing/stableRouting/StableRoutingPacket.msg:27</tt> by nedtool.
 * <pre>
 * packet StablePacket extends RoutingPacket
 * {
 *     int packetId;
 *     int previousId;
 *     int StablePacketKind @enum(StablePacketDef);
 * 
 *     // normal field
 *     Point destLocation;
 *     Point sourceLocation;
 * 
 *     // for routing point to point
 *     Point ballCenter;
 *     Point stuckLocation;
 *     int routingMode @enum(RollingBallForwardingMode);
 * 
 * 
 *     Point nextStoppingPlace;
 * 
 *     Point startStableLocation;
 *     double outCavernRadius = -1;
 *     double aroundHoleRadius = -1;
 *     double inCavernRadius = -1;
 * }
 * </pre>
 */
class StablePacket : public ::RoutingPacket
{
  protected:
    int packetId_var;
    int previousId_var;
    int StablePacketKind_var;
    Point destLocation_var;
    Point sourceLocation_var;
    Point ballCenter_var;
    Point stuckLocation_var;
    int routingMode_var;
    Point nextStoppingPlace_var;
    Point startStableLocation_var;
    double outCavernRadius_var;
    double aroundHoleRadius_var;
    double inCavernRadius_var;

  private:
    void copy(const StablePacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const StablePacket&);

  public:
    StablePacket(const char *name=NULL, int kind=0);
    StablePacket(const StablePacket& other);
    virtual ~StablePacket();
    StablePacket& operator=(const StablePacket& other);
    virtual StablePacket *dup() const {return new StablePacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getPacketId() const;
    virtual void setPacketId(int packetId);
    virtual int getPreviousId() const;
    virtual void setPreviousId(int previousId);
    virtual int getStablePacketKind() const;
    virtual void setStablePacketKind(int StablePacketKind);
    virtual Point& getDestLocation();
    virtual const Point& getDestLocation() const {return const_cast<StablePacket*>(this)->getDestLocation();}
    virtual void setDestLocation(const Point& destLocation);
    virtual Point& getSourceLocation();
    virtual const Point& getSourceLocation() const {return const_cast<StablePacket*>(this)->getSourceLocation();}
    virtual void setSourceLocation(const Point& sourceLocation);
    virtual Point& getBallCenter();
    virtual const Point& getBallCenter() const {return const_cast<StablePacket*>(this)->getBallCenter();}
    virtual void setBallCenter(const Point& ballCenter);
    virtual Point& getStuckLocation();
    virtual const Point& getStuckLocation() const {return const_cast<StablePacket*>(this)->getStuckLocation();}
    virtual void setStuckLocation(const Point& stuckLocation);
    virtual int getRoutingMode() const;
    virtual void setRoutingMode(int routingMode);
    virtual Point& getNextStoppingPlace();
    virtual const Point& getNextStoppingPlace() const {return const_cast<StablePacket*>(this)->getNextStoppingPlace();}
    virtual void setNextStoppingPlace(const Point& nextStoppingPlace);
    virtual Point& getStartStableLocation();
    virtual const Point& getStartStableLocation() const {return const_cast<StablePacket*>(this)->getStartStableLocation();}
    virtual void setStartStableLocation(const Point& startStableLocation);
    virtual double getOutCavernRadius() const;
    virtual void setOutCavernRadius(double outCavernRadius);
    virtual double getAroundHoleRadius() const;
    virtual void setAroundHoleRadius(double aroundHoleRadius);
    virtual double getInCavernRadius() const;
    virtual void setInCavernRadius(double inCavernRadius);
};

inline void doPacking(cCommBuffer *b, StablePacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, StablePacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/node/communication/routing/stableRouting/StableRoutingPacket.msg:50</tt> by nedtool.
 * <pre>
 * packet DiscoverHolePacket extends RoutingPacket
 * {
 *     int originatorId;
 *     Point ballCenter;
 *     int previousId;
 *     string path;
 *     CavernVector caverns;
 *     PointVector hole;
 * }
 * </pre>
 */
class DiscoverHolePacket : public ::RoutingPacket
{
  protected:
    int originatorId_var;
    Point ballCenter_var;
    int previousId_var;
    opp_string path_var;
    CavernVector caverns_var;
    PointVector hole_var;

  private:
    void copy(const DiscoverHolePacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DiscoverHolePacket&);

  public:
    DiscoverHolePacket(const char *name=NULL, int kind=0);
    DiscoverHolePacket(const DiscoverHolePacket& other);
    virtual ~DiscoverHolePacket();
    DiscoverHolePacket& operator=(const DiscoverHolePacket& other);
    virtual DiscoverHolePacket *dup() const {return new DiscoverHolePacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getOriginatorId() const;
    virtual void setOriginatorId(int originatorId);
    virtual Point& getBallCenter();
    virtual const Point& getBallCenter() const {return const_cast<DiscoverHolePacket*>(this)->getBallCenter();}
    virtual void setBallCenter(const Point& ballCenter);
    virtual int getPreviousId() const;
    virtual void setPreviousId(int previousId);
    virtual const char * getPath() const;
    virtual void setPath(const char * path);
    virtual CavernVector& getCaverns();
    virtual const CavernVector& getCaverns() const {return const_cast<DiscoverHolePacket*>(this)->getCaverns();}
    virtual void setCaverns(const CavernVector& caverns);
    virtual PointVector& getHole();
    virtual const PointVector& getHole() const {return const_cast<DiscoverHolePacket*>(this)->getHole();}
    virtual void setHole(const PointVector& hole);
};

inline void doPacking(cCommBuffer *b, DiscoverHolePacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DiscoverHolePacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _STABLEROUTINGPACKET_M_H_

