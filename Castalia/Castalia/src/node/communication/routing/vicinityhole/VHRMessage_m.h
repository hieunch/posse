//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/vicinityhole/VHRMessage.msg.
//

#ifndef _VHRMESSAGE_M_H_
#define _VHRMESSAGE_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    #include "GeoMathHelper.h"
    #include "RoutingPacket_m.h"
    #include <vector>
    typedef std::vector<Point> PointVector;
// }}

/**
 * Class generated from <tt>src/node/communication/routing/vicinityhole/VHRMessage.msg:12</tt> by nedtool.
 * <pre>
 * packet VHRDataPacket extends RoutingPacket
 * {
 *     int packetId;
 *     PointVector path;
 *     int apIndex;
 *     Point destLocation;
 * }
 * </pre>
 */
class VHRDataPacket : public ::RoutingPacket
{
  protected:
    int packetId_var;
    PointVector path_var;
    int apIndex_var;
    Point destLocation_var;

  private:
    void copy(const VHRDataPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const VHRDataPacket&);

  public:
    VHRDataPacket(const char *name=NULL, int kind=0);
    VHRDataPacket(const VHRDataPacket& other);
    virtual ~VHRDataPacket();
    VHRDataPacket& operator=(const VHRDataPacket& other);
    virtual VHRDataPacket *dup() const {return new VHRDataPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getPacketId() const;
    virtual void setPacketId(int packetId);
    virtual PointVector& getPath();
    virtual const PointVector& getPath() const {return const_cast<VHRDataPacket*>(this)->getPath();}
    virtual void setPath(const PointVector& path);
    virtual int getApIndex() const;
    virtual void setApIndex(int apIndex);
    virtual Point& getDestLocation();
    virtual const Point& getDestLocation() const {return const_cast<VHRDataPacket*>(this)->getDestLocation();}
    virtual void setDestLocation(const Point& destLocation);
};

inline void doPacking(cCommBuffer *b, VHRDataPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, VHRDataPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _VHRMESSAGE_M_H_

