//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/mlpRouting/MlpRoutingPacket.msg.
//

#ifndef _MLPROUTINGPACKET_M_H_
#define _MLPROUTINGPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "RoutingPacket_m.h"
#include "GeoMathHelper.h"
#include "StableRoutingPacket_m.h"
typedef std::vector<Point> PointVector;
// }}

/**
 * Enum generated from <tt>src/node/communication/routing/mlpRouting/MlpRoutingPacket.msg:14</tt> by nedtool.
 * <pre>
 * enum MlpPacketDef
 * {
 * 
 *     MLP_DATA_PACKET = 0;       // data packet
 * }
 * </pre>
 */
enum MlpPacketDef {
    MLP_DATA_PACKET = 0
};

/**
 * Enum generated from <tt>src/node/communication/routing/mlpRouting/MlpRoutingPacket.msg:18</tt> by nedtool.
 * <pre>
 * enum MLPForwardingMode
 * {
 * 
 *     MLP_GREEDY_ROUTING = 0;
 *     MLP_ROLLINGBALL_ROUTING = 1;
 * }
 * </pre>
 */
enum MLPForwardingMode {
    MLP_GREEDY_ROUTING = 0,
    MLP_ROLLINGBALL_ROUTING = 1
};

/**
 * Class generated from <tt>src/node/communication/routing/mlpRouting/MlpRoutingPacket.msg:23</tt> by nedtool.
 * <pre>
 * packet MlpPacket extends RoutingPacket
 * {
 *     int packetId;
 *     int previousId;
 *     int MlpPacketKind @enum(MlpPacketDef);
 * 
 *     // normal field
 *     Point destLocation;
 *     Point sourceLocation;
 * 
 *     // for routing point to point
 *     Point ballCenter;
 *     Point stuckLocation;
 *     int routingMode @enum(MLPForwardingMode);
 * 
 *     Point previousStoppingPlace;
 *     Point nextStoppingPlace;
 *     int nextStoppingPlaceId;
 *     PointVector path;
 * 
 *     Point startStableLocation;
 *     int outDelta = 99999;
 *     double aroundHoleRadius = 99999;
 *     int inDelta = 99999;
 * }
 * </pre>
 */
class MlpPacket : public ::RoutingPacket
{
  protected:
    int packetId_var;
    int previousId_var;
    int MlpPacketKind_var;
    Point destLocation_var;
    Point sourceLocation_var;
    Point ballCenter_var;
    Point stuckLocation_var;
    int routingMode_var;
    Point previousStoppingPlace_var;
    Point nextStoppingPlace_var;
    int nextStoppingPlaceId_var;
    PointVector path_var;
    Point startStableLocation_var;
    int outDelta_var;
    double aroundHoleRadius_var;
    int inDelta_var;

  private:
    void copy(const MlpPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MlpPacket&);

  public:
    MlpPacket(const char *name=NULL, int kind=0);
    MlpPacket(const MlpPacket& other);
    virtual ~MlpPacket();
    MlpPacket& operator=(const MlpPacket& other);
    virtual MlpPacket *dup() const {return new MlpPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getPacketId() const;
    virtual void setPacketId(int packetId);
    virtual int getPreviousId() const;
    virtual void setPreviousId(int previousId);
    virtual int getMlpPacketKind() const;
    virtual void setMlpPacketKind(int MlpPacketKind);
    virtual Point& getDestLocation();
    virtual const Point& getDestLocation() const {return const_cast<MlpPacket*>(this)->getDestLocation();}
    virtual void setDestLocation(const Point& destLocation);
    virtual Point& getSourceLocation();
    virtual const Point& getSourceLocation() const {return const_cast<MlpPacket*>(this)->getSourceLocation();}
    virtual void setSourceLocation(const Point& sourceLocation);
    virtual Point& getBallCenter();
    virtual const Point& getBallCenter() const {return const_cast<MlpPacket*>(this)->getBallCenter();}
    virtual void setBallCenter(const Point& ballCenter);
    virtual Point& getStuckLocation();
    virtual const Point& getStuckLocation() const {return const_cast<MlpPacket*>(this)->getStuckLocation();}
    virtual void setStuckLocation(const Point& stuckLocation);
    virtual int getRoutingMode() const;
    virtual void setRoutingMode(int routingMode);
    virtual Point& getPreviousStoppingPlace();
    virtual const Point& getPreviousStoppingPlace() const {return const_cast<MlpPacket*>(this)->getPreviousStoppingPlace();}
    virtual void setPreviousStoppingPlace(const Point& previousStoppingPlace);
    virtual Point& getNextStoppingPlace();
    virtual const Point& getNextStoppingPlace() const {return const_cast<MlpPacket*>(this)->getNextStoppingPlace();}
    virtual void setNextStoppingPlace(const Point& nextStoppingPlace);
    virtual int getNextStoppingPlaceId() const;
    virtual void setNextStoppingPlaceId(int nextStoppingPlaceId);
    virtual PointVector& getPath();
    virtual const PointVector& getPath() const {return const_cast<MlpPacket*>(this)->getPath();}
    virtual void setPath(const PointVector& path);
    virtual Point& getStartStableLocation();
    virtual const Point& getStartStableLocation() const {return const_cast<MlpPacket*>(this)->getStartStableLocation();}
    virtual void setStartStableLocation(const Point& startStableLocation);
    virtual int getOutDelta() const;
    virtual void setOutDelta(int outDelta);
    virtual double getAroundHoleRadius() const;
    virtual void setAroundHoleRadius(double aroundHoleRadius);
    virtual int getInDelta() const;
    virtual void setInDelta(int inDelta);
};

inline void doPacking(cCommBuffer *b, MlpPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MlpPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _MLPROUTINGPACKET_M_H_

