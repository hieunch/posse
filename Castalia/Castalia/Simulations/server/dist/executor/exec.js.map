{"version":3,"sources":["../../src/executor/exec.js"],"names":["register","randomSessionId","length","possible","text","i","charAt","Math","floor","random","queue","config","callback","sessionId","push","markStatus","status","error","shift","exec","mode","network","fieldWidth","fieldHeight","nodes","nodeConfig","routingAlgorithm","macInterface","simulation","traffic","timeLimit","console","log","fileName","requestFileName","writeFile","JSON","stringify","nextId","o2n","n2o","then","writer","createWriteStream","toLowerCase","write","node","id","x","y","pair","source","destination","end","err","eventTraceFileName","energyTraceFileName","nodeTraceFileName","drawFileName","logFileName","statisticsFileName","eventWriter","energyWriter","nodeWriter","drawWriter","logWriter","statisticsWriter","statistics","lines","readFileSync","toString","split","line","test","time","getTime","type","getType","regex","match","parseInt","energy","parseFloat","event","packetId","current","lineRegex","lineMatch","x1","y1","x2","y2","color","circleRegex","circleMatch","centerX","centerY","radius","pointRegex","pointMatch","arcRegex","arcMatch","fromX","fromY","toX","toY","totalPacketReceived","estimateLifetime","sumHopRatio","endPointCount","energyConsumed","catch"],"mappings":";;;;;QAmBgBA,Q,GAAAA,Q;;AAnBhB;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMC,kBAAmBC,MAAD,IAAY;AAClC,QAAMC,WAAW,eACf,wBADe,GAEf,gCAFF;;AAIA,MAAIC,OAAO,EAAX;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,MAApB,EAA4BG,GAA5B,EACED,QAAQD,SAASG,MAAT,CAAgBC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgBN,SAASD,MAApC,CAAhB,CAAR;;AAEF,SAAOE,IAAP;AACD,CAVD;;AAYA,IAAIM,QAAQ,EAAZ;;AAEO,SAASV,QAAT,CAAkBW,MAAlB,EAA0BC,QAA1B,EAAoC;AACzC,MAAIC,YAAYZ,gBAAgB,CAAhB,CAAhB;AACAS,QAAMI,IAAN,CAAW,EAACD,SAAD,EAAYF,MAAZ,EAAX;AACA,oBAAQI,UAAR,CAAmBF,SAAnB,EAA8B,UAA9B,EAA0C,kDAA1C;AACAD,WAAS,IAAT,EAAe;AACbI,YAAQ,IADK;AAEbH,eAAWA,SAFE;AAGbI,WAAO;AAHM,GAAf;;AAMA,MAAIP,MAAMR,MAAN,KAAiB,CAArB,EAAwB;AACtB,UAAM,EAACS,MAAD,EAASE,SAAT,KAAsBH,MAAMQ,KAAN,EAA5B;AACAC,SAAK,EAACR,MAAD,EAASE,SAAT,EAAL;AACD;AACF;;AAKD,SAASM,IAAT,CAAc,EAACR,MAAD,EAASE,SAAT,EAAd,EAAmC;AACjC,QAAM;AACJO,WAAO,OADH;AAEJC,aAAS;AACPC,gBADO,EACKC,WADL;AAEPC,WAFO,EAEAC,YAAY,EAACC,gBAAD,EAAmBC,YAAnB;AAFZ,KAFL;AAMJC,gBAAY;AACVC,gBAAU,EADA,EACIC;AADJ;AANR,MASFnB,MATJ;AAUAoB,UAAQC,GAAR,CAAYH,OAAZ;AACA,4BAAK,0BAAL;;AAEA,MAAII,WAAY,GAAEpB,SAAU,MAA5B;AACA,QAAMqB,kBAAmB,QAAOrB,SAAU,cAA1C;AACA,eAAGsB,SAAH,CAAaD,eAAb,EAA8BE,KAAKC,SAAL,CAAe1B,MAAf,CAA9B,EAAsD,MAAM,CAAE,CAA9D;AACAoB,UAAQC,GAAR,CAAYH,OAAZ;;AAIA,MAAIS,SAAS,CAAb;AACA,MAAIC,MAAM,EAAV;AAAA,MAAcC,MAAM,EAApB;;AAGA,4BAAK;kCAC2BP,QAAS;GADzC,EAEGQ,IAFH,CAEQ,MAAM;AACZ,QAAIC,SAAS,aAAGC,iBAAH,CAAqBV,QAArB,EAA+B,EAAC,SAAS,GAAV,EAA/B,CAAb;;AAEA,QAAIP,gBAAJ,EAAsB;AACpB,UAAIA,iBAAiBkB,WAAjB,OAAmC,QAAvC,EAAiD;AAC/CF,eAAOG,KAAP,CAAc,kEAAd;AACD,OAFD,MAEO,IAAInB,iBAAiBkB,WAAjB,OAAmC,MAAvC,EAA+C;AACpDF,eAAOG,KAAP,CAAc,gEAAd;AACD,OAFM,MAEA,IAAInB,iBAAiBkB,WAAjB,OAAmC,aAAvC,EAAsD;AAC3DF,eAAOG,KAAP,CAAc,uEAAd;AACD,OAFM,MAEA,IAAInB,iBAAiBkB,WAAjB,OAAmC,QAAvC,EAAiD;AACtDF,eAAOG,KAAP,CAAc,kEAAd;AACD,OAFM,MAEA,IAAInB,iBAAiBkB,WAAjB,OAAmC,cAAvC,EAAuD;AAC5DF,eAAOG,KAAP,CAAc,wEAAd;AACD,OAFM,MAEA,IAAInB,iBAAiBkB,WAAjB,OAAmC,KAAvC,EAA8C;AACnDF,eAAOG,KAAP,CAAc,+DAAd;AACD,OAFM,MAEA;AACLH,eAAOG,KAAP,CAAc,gEAAd;AACD;AACF,KAhBD,MAgBO;AACLH,aAAOG,KAAP,CAAc,gEAAd;AACD;;AAKDH,WAAOG,KAAP,CAAc,iBAAgBrB,MAAMtB,MAAO,IAA3C;AACAwC,WAAOG,KAAP,CAAc,gBAAevB,UAAW,IAAxC;AACAoB,WAAOG,KAAP,CAAc,gBAAetB,WAAY,IAAzC;;AAGA,SAAK,IAAIuB,IAAT,IAAiBtB,KAAjB,EAAwB;AACtB,YAAM,EAACuB,EAAD,EAAKC,CAAL,EAAQC,CAAR,KAAaH,IAAnB;AACAJ,aAAOG,KAAP,CAAc,WAAUE,EAAG,aAAYC,CAAE,IAAzC;AACAN,aAAOG,KAAP,CAAc,WAAUE,EAAG,aAAYE,CAAE,IAAzC;AACD;;AAGDP,WAAOG,KAAP,CAAc,wBAAd;;AAEA,SAAK,IAAIxC,IAAI,CAAb,EAAgBA,IAAIwB,QAAQ3B,MAA5B,EAAoCG,GAApC,EAAyC;AACvC,UAAI6C,OAAOrB,QAAQxB,CAAR,CAAX;AACA,YAAM,EAAC8C,MAAD,EAASC,WAAT,KAAwBF,IAA9B;AACAR,aAAOG,KAAP,CAAc,WAAUM,MAAO,iCAA/B;AACAT,aAAOG,KAAP,CAAc,WAAUM,MAAO,yBAAwBC,WAAY,KAAnE;AACA;AACA;AACD;;AAED;;;AAIA,QAAIhC,SAAS,OAAb,EAAsB;AACpBsB,aAAOG,KAAP,CAAc,+CAAd;AACAH,aAAOG,KAAP,CAAc,yBAAd;AACD,KAHD,MAGO;AACLH,aAAOG,KAAP,CAAc,0BAAd;AACD;;AAEDH,WAAOW,GAAP;AACA,sBAAQtC,UAAR,CAAmBF,SAAnB,EAA8B,SAA9B,EAAyC,0BAAzC;;AAEA,iBAAGsB,SAAH,CAAa,4DAAb,EACE,eAAcF,QAAS,aADzB,EACuC,UAAUqB,GAAV,EAAe;AACpD,UAAIA,GAAJ,EAAS,MAAMA,GAAN;AACV,KAHD;AAIA,WAAO,0BAAK;;KAAL,CAAP,CAnEY,CAqET;AACJ,GAxED,EAwEGb,IAxEH,CAwEQ,MAAM;AACZ,8BAAK,QAAOR,QAAS,WAArB;;AAEA,UAAMsB,qBAAsB,QAAO1C,SAAU,iBAA7C;AACA,UAAM2C,sBAAuB,QAAO3C,SAAU,kBAA9C;AACA,UAAM4C,oBAAqB,QAAO5C,SAAU,gBAA5C;AACA,UAAM6C,eAAgB,QAAO7C,SAAU,WAAvC;AACA,UAAM8C,cAAe,QAAO9C,SAAU,UAAtC;AACA,UAAM+C,qBAAsB,QAAO/C,SAAU,iBAA7C;AACA,QAAIgD,cAAc,aAAGlB,iBAAH,CAAqBY,kBAArB,CAAlB;AACA,QAAIO,eAAe,aAAGnB,iBAAH,CAAqBa,mBAArB,CAAnB;AACA,QAAIO,aAAa,aAAGpB,iBAAH,CAAqBc,iBAArB,CAAjB;AACA,QAAIO,aAAa,aAAGrB,iBAAH,CAAqBe,YAArB,CAAjB;AACA,QAAIO,YAAY,aAAGtB,iBAAH,CAAqBgB,WAArB,CAAhB;AACA,QAAIO,mBAAmB,aAAGvB,iBAAH,CAAqBiB,kBAArB,CAAvB;;AAEA,QAAIO,aAAa,EAAjB;;AAEA,QAAIC,QAAQ,aAAGC,YAAH,CAAgB,oBAAhB,EAAsCC,QAAtC,GAAiDC,KAAjD,CAAuD,IAAvD,CAAZ;AACA,SAAK,IAAIC,IAAT,IAAiBJ,KAAjB,EAAwB;AACtB,UAAI,cAAcK,IAAd,CAAmBD,IAAnB,CAAJ,EAA8B;AAC5B,cAAME,OAAOC,QAAQH,IAAR,CAAb;AACA,cAAMI,OAAOC,QAAQL,IAAR,CAAb;;AAEA,YAAII,SAAS,QAAb,EAAuB;AACrB,cAAIE,QAAQ,6BAAZ;AACA,cAAIC,QAAQD,MAAM3D,IAAN,CAAWqD,IAAX,CAAZ;AACA,cAAIO,KAAJ,EAAW;AACT,gBAAIhC,KAAKiC,SAASD,MAAM,CAAN,CAAT,CAAT;AACA,gBAAIE,SAASC,WAAWH,MAAM,CAAN,CAAX,CAAb;AACA,gBAAII,QAAQ,EAAC,KAAK,GAAN,EAAW,MAAMpC,EAAjB,EAAqB,QAAQ2B,IAA7B,EAAmC,UAAUO,MAA7C,EAAZ;AACAnB,yBAAajB,KAAb,CAAoB,GAAET,KAAKC,SAAL,CAAe8C,KAAf,CAAsB,IAA5C;AACD;AACF,SATD,MASO,IAAIP,SAAS,OAAb,EAAsB;AAC3B,cAAIE,QAAQ,oCAAZ;AACA,cAAIC,QAAQD,MAAM3D,IAAN,CAAWqD,IAAX,CAAZ;AACA,cAAIO,KAAJ,EAAW;AACT,gBAAIhC,KAAKiC,SAASD,MAAM,CAAN,CAAT,CAAT;AACA,gBAAI/B,IAAIkC,WAAWH,MAAM,CAAN,CAAX,CAAR;AACA,gBAAI9B,IAAIiC,WAAWH,MAAM,CAAN,CAAX,CAAR;AACA,gBAAIjC,OAAO,EAAC,MAAMC,EAAP,EAAW,KAAKC,CAAhB,EAAmB,KAAKC,CAAxB,EAA2B,UAAU,CAAC,CAAtC,EAAX;AACAc,uBAAWlB,KAAX,CAAkB,GAAET,KAAKC,SAAL,CAAeS,IAAf,CAAqB,IAAzC;AACD;AACF,SAVM,MAUA,IAAI8B,SAAS,MAAT,IAAmBA,SAAS,SAA5B,IAAyCA,SAAS,SAAlD,IAA+DA,SAAS,MAA5E,EAAoF;AACzF,cAAIE,QAAQ,6DAAZ;AACA,cAAIC,QAAQD,MAAM3D,IAAN,CAAWqD,IAAX,CAAZ;AACA,cAAIO,KAAJ,EAAW;AACT,gBAAIK,WAAWJ,SAASD,MAAM,CAAN,CAAT,CAAf;AACA,gBAAI5B,SAAS6B,SAASD,MAAM,CAAN,CAAT,CAAb;AACA,gBAAI3B,cAAc4B,SAASD,MAAM,CAAN,CAAT,CAAlB;AACA,gBAAIM,UAAUL,SAASD,MAAM,CAAN,CAAT,CAAd;AACA,gBAAII,QAAQ,EAAC,KAAKP,KAAK,CAAL,CAAN,EAAe,QAAQQ,QAAvB,EAAiC,UAAU,QAA3C;AACV,wBAAUjC,MADA,EACQ,QAAQC,WADhB,EAC6B,OAAOiC,OADpC,EAC6C,SAAS,SADtD,EACiE,QAAQX,IADzE,EAAZ;AAEAb,wBAAYhB,KAAZ,CAAmB,GAAET,KAAKC,SAAL,CAAe8C,KAAf,CAAsB,IAA3C;AACD;AACF,SAZM,MAYA,IAAIP,SAAS,MAAb,EAAqB;AAC1B;AACA,cAAIU,YAAY,wDAAhB;AACA,cAAIC,YAAYD,UAAUnE,IAAV,CAAeqD,IAAf,CAAhB;AACA,cAAIe,SAAJ,EAAe;AACb,gBAAIC,KAAKN,WAAWK,UAAU,CAAV,CAAX,CAAT;AACA,gBAAIE,KAAKP,WAAWK,UAAU,CAAV,CAAX,CAAT;AACA,gBAAIG,KAAKR,WAAWK,UAAU,CAAV,CAAX,CAAT;AACA,gBAAII,KAAKT,WAAWK,UAAU,CAAV,CAAX,CAAT;AACA,gBAAIK,QAAQL,UAAU,CAAV,CAAZ;AACAvB,uBAAWnB,KAAX,CAAkB,GAAET,KAAKC,SAAL,CAAe,EAACuC,MAAM,MAAP,EAAeY,EAAf,EAAmBC,EAAnB,EAAuBC,EAAvB,EAA2BC,EAA3B,EAA+BC,KAA/B,EAAf,CAAsD,IAA1E;AACD;;AAGD,cAAIC,cAAc,8CAAlB;AACA,cAAIC,cAAcD,YAAY1E,IAAZ,CAAiBqD,IAAjB,CAAlB;AACA,cAAIsB,WAAJ,EAAiB;AACf,gBAAIC,UAAUb,WAAWY,YAAY,CAAZ,CAAX,CAAd;AACA,gBAAIE,UAAUd,WAAWY,YAAY,CAAZ,CAAX,CAAd;AACA,gBAAIG,SAASf,WAAWY,YAAY,CAAZ,CAAX,CAAb;AACA,gBAAIF,QAAQE,YAAY,CAAZ,CAAZ;AACA9B,uBAAWnB,KAAX,CAAkB,GAAET,KAAKC,SAAL,CAAe,EAACuC,MAAM,QAAP,EAAiBmB,OAAjB,EAA0BC,OAA1B,EAAmCC,MAAnC,EAA2CL,KAA3C,EAAf,CAAkE,IAAtF;AACD;;AAGD,cAAIM,aAAa,mCAAjB;AACA,cAAIC,aAAaD,WAAW/E,IAAX,CAAgBqD,IAAhB,CAAjB;AACA,cAAI2B,UAAJ,EAAgB;AACd,gBAAInD,IAAIkC,WAAWiB,WAAW,CAAX,CAAX,CAAR;AACA,gBAAIlD,IAAIiC,WAAWiB,WAAW,CAAX,CAAX,CAAR;AACA,gBAAIP,QAAQO,WAAW,CAAX,CAAZ;AACAnC,uBAAWnB,KAAX,CAAkB,GAAET,KAAKC,SAAL,CAAe,EAACuC,MAAM,OAAP,EAAgB5B,CAAhB,EAAmBC,CAAnB,EAAsB2C,KAAtB,EAAf,CAA6C,IAAjE;AACD;;AAED,cAAIQ,WAAW,iEAAf;AACA,cAAIC,WAAWD,SAASjF,IAAT,CAAcqD,IAAd,CAAf;AACA,cAAI6B,QAAJ,EAAc;AACZ,gBAAIC,QAAQpB,WAAWmB,SAAS,CAAT,CAAX,CAAZ;AACA,gBAAIE,QAAQrB,WAAWmB,SAAS,CAAT,CAAX,CAAZ;AACA,gBAAIG,MAAMtB,WAAWmB,SAAS,CAAT,CAAX,CAAV;AACA,gBAAII,MAAMvB,WAAWmB,SAAS,CAAT,CAAX,CAAV;AACA,gBAAIJ,SAASf,WAAWmB,SAAS,CAAT,CAAX,CAAb;AACA,gBAAIT,QAAQS,SAAS,CAAT,CAAZ;AACArC,uBAAWnB,KAAX,CAAkB,GAAET,KAAKC,SAAL,CAAe,EAACuC,MAAM,KAAP,EAAc0B,KAAd,EAAqBC,KAArB,EAA4BC,GAA5B,EAAiCC,GAAjC,EAAsCR,MAAtC,EAA8CL,KAA9C,EAAf,CAAqE,IAAzF;AACD;AACF,SA7CM,MA8CF,IAAIhB,SAAS,YAAb,EAA2B;AAC9B,cAAIE,QAAQ,gKAAZ;AACA,cAAIC,QAAQD,MAAM3D,IAAN,CAAWqD,IAAX,CAAZ;;AAEA,cAAIO,KAAJ,EAAW;AACT,gBAAIhC,KAAKiC,SAASD,MAAM,CAAN,CAAT,CAAT;AACA,gBAAI2B,sBAAsB1B,SAASD,MAAM,CAAN,CAAT,CAA1B;AACA,gBAAI4B,mBAAmBzB,WAAWH,MAAM,CAAN,CAAX,CAAvB;AACA,gBAAI/B,IAAIkC,WAAWH,MAAM,CAAN,CAAX,CAAR;AACA,gBAAI9B,IAAIiC,WAAWH,MAAM,CAAN,CAAX,CAAR;AACA,gBAAI6B,cAAc1B,WAAWH,MAAM,CAAN,CAAX,CAAlB;AACA,gBAAI8B,gBAAgB3B,WAAWH,MAAM,CAAN,CAAX,CAApB;AACA,gBAAI+B,iBAAiB5B,WAAWH,MAAM,CAAN,CAAX,CAArB;AACAZ,uBAAWpB,EAAX,IAAiB,EAACA,EAAD,EAAK2D,mBAAL;AACfC,8BADe,EACG3D,CADH,EACMC,CADN,EACS2D,WADT,EACsBC,aADtB,EACqCC,cADrC,EAAjB;AAED;AACF;AACF,OAlGD,MAkGO,IAAI,YAAYrC,IAAZ,CAAiBD,IAAjB,CAAJ,EAA2B;AAChC,YAAIM,QAAQ,cAAZ;AACA,YAAIC,QAAQD,MAAM3D,IAAN,CAAWqD,IAAX,CAAZ;AACA,YAAIO,KAAJ,EAAW;AACTd,oBAAUpB,KAAV,CAAiB,GAAEkC,MAAM,CAAN,CAAS,IAA5B;AACD;AACF;AACF;;AAGDb,qBAAiBrB,KAAjB,CAAuBT,KAAKC,SAAL,CAAe8B,UAAf,CAAvB;;AAEAL,iBAAaT,GAAb;AACAQ,gBAAYR,GAAZ;AACAU,eAAWV,GAAX;AACAW,eAAWX,GAAX;AACAY,cAAUZ,GAAV;AACAa,qBAAiBb,GAAjB;AACA,sBAAQtC,UAAR,CAAmBF,SAAnB,EAA8B,WAA9B,EAA2C,sBAA3C;AACA,QAAIH,MAAMR,MAAN,IAAgB,CAApB,EAAwB;AACtB,YAAM,EAACS,MAAD,EAASE,SAAT,KAAsBH,MAAMQ,KAAN,EAA5B;AACAC,WAAK,EAACR,MAAD,EAASE,SAAT,EAAL;AACD;AACF,GArND,EAqNGkG,KArNH,CAqNSzD,OAAO;AACd,sBAAQvC,UAAR,CAAmBF,SAAnB,EAA8B,OAA9B,EAAuCyC,IAAIgB,QAAJ,EAAvC;AACA,QAAI5D,MAAMR,MAAN,IAAgB,CAApB,EAAwB;AACtB,YAAM,EAACS,MAAD,EAASE,SAAT,KAAsBH,MAAMQ,KAAN,EAA5B;AACAC,WAAK,EAACR,MAAD,EAASE,SAAT,EAAL;AACD;AACF,GA3ND;AA4ND;;AAED,MAAMgE,UAAWL,IAAD,IAAU;AACxB,MAAIM,QAAQ,mBAAZ;AACA,MAAIC,QAAQD,MAAM3D,IAAN,CAAWqD,IAAX,CAAZ;;AAEA,MAAIO,KAAJ,EAAW;AACT,WAAOA,MAAM,CAAN,CAAP;AACD;AACD,SAAO,IAAP;AACD,CARD;;AAUA,MAAMJ,UAAWH,IAAD,IAAU;AACxB,MAAIM,QAAQ,eAAZ;AACA,MAAIC,QAAQD,MAAM3D,IAAN,CAAWqD,IAAX,CAAZ;;AAEA,MAAIO,KAAJ,EAAW;AACT,WAAOG,WAAWH,MAAM,CAAN,CAAX,CAAP;AACD;;AAED,SAAO,CAAP;AACD,CATD","file":"exec.js","sourcesContent":["import fs from 'fs'\r\nimport cmd from 'cmd-promise'\r\nimport Promise from 'bluebird'\r\nimport session from '../session'\r\n\r\nconst randomSessionId = (length) => {\r\n  const possible = \"ABCDEFGHIJ\" +\r\n    \"KLMNOPQRSTUVWXYZabcdef\" +\r\n    \"ghijklmnopqrstuvwxyz0123456789\";\r\n\r\n  let text = \"\";\r\n  for (let i = 0; i < length; i++)\r\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n\r\n  return text;\r\n};\r\n\r\nlet queue = [];\r\n\r\nexport function register(config, callback) {\r\n  let sessionId = randomSessionId(5);\r\n  queue.push({sessionId, config});\r\n  session.markStatus(sessionId, \"enqueued\", \"Simulation is registered, waiting to be executed\");\r\n  callback(null, {\r\n    status: \"OK\",\r\n    sessionId: sessionId,\r\n    error: null,\r\n  });\r\n\r\n  if (queue.length === 1) {\r\n    const {config, sessionId} = queue.shift();\r\n    exec({config, sessionId});\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nfunction exec({config, sessionId}) {\r\n  const {\r\n    mode = \"debug\",\r\n    network: {\r\n      fieldWidth, fieldHeight,\r\n      nodes, nodeConfig: {routingAlgorithm, macInterface}\r\n    },\r\n    simulation: {\r\n      traffic = [], timeLimit\r\n    }\r\n  } = config;\r\n  console.log(traffic);\r\n  cmd(`rm -f Castalia-Trace.txt`);\r\n\r\n  let fileName = `${sessionId}.ini`;\r\n  const requestFileName = `logs/${sessionId}_request.txt`;\r\n  fs.writeFile(requestFileName, JSON.stringify(config), () => {});\r\n  console.log(traffic);\r\n\r\n\r\n\r\n  let nextId = 0;\r\n  let o2n = {}, n2o = {};\r\n\r\n\r\n  cmd(`\r\n    copy template\\\\template.ini ${fileName}\r\n  `).then(() => {\r\n    let writer = fs.createWriteStream(fileName, {'flags': 'a'});\r\n\r\n    if (routingAlgorithm) {\r\n      if (routingAlgorithm.toLowerCase() === 'greedy') {\r\n        writer.write(`SN.node[*].Communication.RoutingProtocolName = \"GreedyRouting\"\\n`)\r\n      } else if (routingAlgorithm.toLowerCase() === 'gpsr') {\r\n        writer.write(`SN.node[*].Communication.RoutingProtocolName = \"GpsrRouting\"\\n`)\r\n      } else if (routingAlgorithm.toLowerCase() === 'rollingball') {\r\n        writer.write(`SN.node[*].Communication.RoutingProtocolName = \"RollingBallRouting\"\\n`)\r\n      } else if (routingAlgorithm.toLowerCase() === 'stable') {\r\n        writer.write(`SN.node[*].Communication.RoutingProtocolName = \"StableRouting\"\\n`)\r\n      } else if (routingAlgorithm.toLowerCase() === 'shortestpath') {\r\n        writer.write(`SN.node[*].Communication.RoutingProtocolName = \"ShortestPathRouting\"\\n`)\r\n      } else if (routingAlgorithm.toLowerCase() === 'mlp') {\r\n        writer.write(`SN.node[*].Communication.RoutingProtocolName = \"MlpRouting\"\\n`)\r\n      } else {\r\n        writer.write(`SN.node[*].Communication.RoutingProtocolName = \"GpsrRouting\"\\n`)\r\n      }\r\n    } else {\r\n      writer.write(`SN.node[*].Communication.RoutingProtocolName = \"GpsrRouting\"\\n`)\r\n    }\r\n\r\n\r\n\r\n\r\n    writer.write(`SN.numNodes = ${nodes.length}\\n`);\r\n    writer.write(`SN.field_x = ${fieldWidth}\\n`);\r\n    writer.write(`SN.field_y = ${fieldHeight}\\n`);\r\n\r\n\r\n    for (let node of nodes) {\r\n      const {id, x, y} = node;\r\n      writer.write(`SN.node[${id}].xCoor = ${x}\\n`);\r\n      writer.write(`SN.node[${id}].yCoor = ${y}\\n`);\r\n    }\r\n\r\n\r\n    writer.write(`sim-time-limit = 30s\\n`);\r\n\r\n    for (let i = 0; i < traffic.length; i++) {\r\n      let pair = traffic[i];\r\n      const {source, destination} = pair;\r\n      writer.write(`SN.node[${source}].Application.isSource = true\\n`);\r\n      writer.write(`SN.node[${source}].Application.sink = \"${destination}\"\\n`);\r\n      // writer.write(`SN.node[${source}].Application.startSendingTime = ${5 + i * 10}\\n`);\r\n      // writer.write(`SN.node[${source}].Application.stopSendingTime = ${5 + i * 10 + 10}\\n`);\r\n    }\r\n\r\n    // sim-time-limit = 25s\r\n\r\n\r\n\r\n    if (mode === \"debug\") {\r\n      writer.write(`SN.node[*].Application.numPacketToSend = 10\\n`);\r\n      writer.write(`SN.isDebugMode = true\\n`)\r\n    } else {\r\n      writer.write(`SN.isDebugMode = false\\n`)\r\n    }\r\n\r\n    writer.end();\r\n    session.markStatus(sessionId, \"running\", \"Simulation is running...\");\r\n\r\n    fs.writeFile('D:\\\\SEDIC\\\\WSN\\\\posse\\\\Castalia\\\\Castalia\\\\CastaliaBin3.sh',\r\n     `Castalia -i ${fileName} -c General`, function (err) { \r\n      if (err) throw err;\r\n    });\r\n    return cmd(`\r\n      start mingwenv3.cmd \r\n    `) //D:\\\\SEDIC\\\\WSN\\\\posse\\\\Castalia\\\\Castalia\\\\\r\n  }).then(() => {\r\n    cmd(`move ${fileName} archives`);\r\n\r\n    const eventTraceFileName = `logs/${sessionId}_eventTrace.txt`;\r\n    const energyTraceFileName = `logs/${sessionId}_energyTrace.txt`;\r\n    const nodeTraceFileName = `logs/${sessionId}_nodeTrace.txt`;\r\n    const drawFileName = `logs/${sessionId}_draw.txt`;\r\n    const logFileName = `logs/${sessionId}_log.txt`;\r\n    const statisticsFileName = `logs/${sessionId}_statistics.txt`;\r\n    let eventWriter = fs.createWriteStream(eventTraceFileName);\r\n    let energyWriter = fs.createWriteStream(energyTraceFileName);\r\n    let nodeWriter = fs.createWriteStream(nodeTraceFileName);\r\n    let drawWriter = fs.createWriteStream(drawFileName);\r\n    let logWriter = fs.createWriteStream(logFileName);\r\n    let statisticsWriter = fs.createWriteStream(statisticsFileName);\r\n\r\n    let statistics = [];\r\n\r\n    let lines = fs.readFileSync('Castalia-Trace.txt').toString().split('\\n');\r\n    for (let line of lines) {\r\n      if (/WSN_EVENT/gi.test(line)) {\r\n        const time = getTime(line);\r\n        const type = getType(line);\r\n\r\n        if (type === 'ENERGY') {\r\n          let regex = /id:(\\d+) energy:([\\d\\.]+)/gi;\r\n          let match = regex.exec(line);\r\n          if (match) {\r\n            let id = parseInt(match[1]);\r\n            let energy = parseFloat(match[2]);\r\n            let event = {\"e\": \"E\", \"id\": id, \"time\": time, \"energy\": energy};\r\n            energyWriter.write(`${JSON.stringify(event)}\\n`);\r\n          }\r\n        } else if (type === 'FINAL') {\r\n          let regex = /id:(\\d+) x:([\\d\\.]+) y:([\\d\\.]+)/gi;\r\n          let match = regex.exec(line);\r\n          if (match) {\r\n            let id = parseInt(match[1]);\r\n            let x = parseFloat(match[2]);\r\n            let y = parseFloat(match[3]);\r\n            let node = {\"id\": id, \"x\": x, \"y\": y, \"d_time\": -1} ;\r\n            nodeWriter.write(`${JSON.stringify(node)}\\n`);\r\n          }\r\n        } else if (type === 'SEND' || type === 'FORWARD' || type === 'RECEIVE' || type === 'DROP') {\r\n          let regex = /packetId:(\\d+) source:(\\d+) destination:(\\d+) current:(\\d+)/;\r\n          let match = regex.exec(line);\r\n          if (match) {\r\n            let packetId = parseInt(match[1]);\r\n            let source = parseInt(match[2]);\r\n            let destination = parseInt(match[3]);\r\n            let current = parseInt(match[4]);\r\n            let event = {\"e\": type[0], \"p_id\": packetId, \"p_type\": \"normal\",\r\n              \"source\": source, \"dest\": destination, \"cur\": current, \"layer\": \"network\", \"time\": time};\r\n            eventWriter.write(`${JSON.stringify(event)}\\n`);\r\n          }\r\n        } else if (type === 'DRAW') {\r\n          // console.log(line);\r\n          let lineRegex = /LINE ([-\\d\\.]+) ([-\\d\\.]+) ([-\\d\\.]+) ([-\\d\\.]+) (\\S+)/;\r\n          let lineMatch = lineRegex.exec(line);\r\n          if (lineMatch) {\r\n            let x1 = parseFloat(lineMatch[1]);\r\n            let y1 = parseFloat(lineMatch[2]);\r\n            let x2 = parseFloat(lineMatch[3]);\r\n            let y2 = parseFloat(lineMatch[4]);\r\n            let color = lineMatch[5];\r\n            drawWriter.write(`${JSON.stringify({type: 'line', x1, y1, x2, y2, color})}\\n`)\r\n          }\r\n\r\n\r\n          let circleRegex = /CIRCLE ([-\\d\\.]+) ([-\\d\\.]+) ([\\d\\.]+) (\\S+)/;\r\n          let circleMatch = circleRegex.exec(line);\r\n          if (circleMatch) {\r\n            let centerX = parseFloat(circleMatch[1]);\r\n            let centerY = parseFloat(circleMatch[2]);\r\n            let radius = parseFloat(circleMatch[3]);\r\n            let color = circleMatch[4];\r\n            drawWriter.write(`${JSON.stringify({type: 'circle', centerX, centerY, radius, color})}\\n`)\r\n          }\r\n\r\n\r\n          let pointRegex = /POINT ([-\\d\\.]+) ([-\\d\\.]+) (\\S+)/;\r\n          let pointMatch = pointRegex.exec(line);\r\n          if (pointMatch) {\r\n            let x = parseFloat(pointMatch[1]);\r\n            let y = parseFloat(pointMatch[2]);\r\n            let color = pointMatch[3];\r\n            drawWriter.write(`${JSON.stringify({type: 'point', x, y, color})}\\n`)\r\n          }\r\n\r\n          let arcRegex = /ARC ([-\\d\\.]+) ([-\\d\\.]+) ([-\\d\\.]+) ([-\\d\\.]+) ([\\d\\.]+) (\\S+)/;\r\n          let arcMatch = arcRegex.exec(line);\r\n          if (arcMatch) {\r\n            let fromX = parseFloat(arcMatch[1]);\r\n            let fromY = parseFloat(arcMatch[2]);\r\n            let toX = parseFloat(arcMatch[3]);\r\n            let toY = parseFloat(arcMatch[4]);\r\n            let radius = parseFloat(arcMatch[5]);\r\n            let color = arcMatch[6];\r\n            drawWriter.write(`${JSON.stringify({type: 'arc', fromX, fromY, toX, toY, radius, color})}\\n`)\r\n          }\r\n        }\r\n        else if (type === 'STATISTICS') {\r\n          let regex = /id:(\\d+) totalPacketReceived:(\\d+) estimateLifetime:([\\d\\.]+) x:([\\d\\.]+) y:([\\d\\.]+) sumHopRatio:([\\d\\.]+) endPointCount:([\\d\\.]+) energyConsumed:([\\d\\.]+)/gi;\r\n          let match = regex.exec(line);\r\n\r\n          if (match) {\r\n            let id = parseInt(match[1]);\r\n            let totalPacketReceived = parseInt(match[2]);\r\n            let estimateLifetime = parseFloat(match[3]);\r\n            let x = parseFloat(match[4]);\r\n            let y = parseFloat(match[5]);\r\n            let sumHopRatio = parseFloat(match[6]);\r\n            let endPointCount = parseFloat(match[7]);\r\n            let energyConsumed = parseFloat(match[8]);\r\n            statistics[id] = {id, totalPacketReceived,\r\n              estimateLifetime, x, y, sumHopRatio, endPointCount, energyConsumed}\r\n          }\r\n        }\r\n      } else if (/WSN_LOG/gi.test(line)){\r\n        let regex = /WSN_LOG (.+)/;\r\n        let match = regex.exec(line);\r\n        if (match) {\r\n          logWriter.write(`${match[1]}\\n`);\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    statisticsWriter.write(JSON.stringify(statistics));\r\n\r\n    energyWriter.end();\r\n    eventWriter.end();\r\n    nodeWriter.end();\r\n    drawWriter.end();\r\n    logWriter.end();\r\n    statisticsWriter.end();\r\n    session.markStatus(sessionId, \"completed\", \"Simulation completed\");\r\n    if (queue.length >= 1)  {\r\n      const {config, sessionId} = queue.shift();\r\n      exec({config, sessionId});\r\n    }\r\n  }).catch(err => {\r\n    session.markStatus(sessionId, \"error\", err.toString());\r\n    if (queue.length >= 1)  {\r\n      const {config, sessionId} = queue.shift();\r\n      exec({config, sessionId});\r\n    }\r\n  });\r\n}\r\n\r\nconst getType = (line) => {\r\n  let regex = /WSN_EVENT (\\S+)/gi;\r\n  let match = regex.exec(line);\r\n\r\n  if (match) {\r\n    return match[1];\r\n  }\r\n  return null;\r\n};\r\n\r\nconst getTime = (line) => {\r\n  let regex = /^(\\d+\\.\\d+)/gi;\r\n  let match = regex.exec(line);\r\n\r\n  if (match) {\r\n    return parseFloat(match[1]);\r\n  }\r\n\r\n  return 0;\r\n};\r\n\r\n\r\n\r\n"]}