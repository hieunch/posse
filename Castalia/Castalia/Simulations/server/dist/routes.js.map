{"version":3,"sources":["../src/routes.js"],"names":["routes","post","req","res","body","error","simulationResult","json","status","toString","get","sessionId","params","ss","getSession","next","filePath","resolve","sendFile","readFile","err","data","nodes","split","filter","_","map","JSON","parse"],"mappings":"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","file":"routes.js","sourcesContent":["import {Router} from 'express';\r\nimport {register} from './executor/exec'\r\nimport fs from 'fs'\r\nimport path from 'path';\r\nimport session from './session'\r\n\r\nconst routes = Router();\r\n\r\n/**\r\n *\r\n * GET home page\r\n */\r\n/**\r\n * GET /list\r\n *\r\n * This is a sample route demonstrating\r\n * a simple approach to error handling and testing\r\n * the global error handler. You most certainly want to\r\n * create different/better error handlers depending on\r\n * your use case.\r\n */\r\nroutes.post('/exec', (req, res) => {\r\n  register(req.body, (error, simulationResult) => {\r\n    if (error) {\r\n      res.json({\r\n        status: \"error\",\r\n        error: error.toString(),\r\n      });\r\n    } else {\r\n      res.json(simulationResult);\r\n    }\r\n  })\r\n});\r\n\r\nroutes.get('/status/:sessionId', (req, res) => {\r\n  const sessionId = req.params.sessionId;\r\n  const ss = session.getSession(sessionId) || {status: \"error\", error: \"invalid session id\"};\r\n  if (!ss) {\r\n    res.status(404).json(ss);\r\n    return;\r\n  }\r\n\r\n  res.json(ss);\r\n});\r\n\r\nroutes.get('/result/energy/:sessionId', (req, res, next) => {\r\n  const sessionId = req.params.sessionId;\r\n  const ss = session.getSession(sessionId) || {status: \"error\", error: \"invalid session id\"};\r\n  if (ss.status !== 'completed') {\r\n    res.status(404).json(ss);\r\n    return;\r\n  }\r\n\r\n  const filePath = path.resolve(`logs/${sessionId}_energyTrace.txt`);\r\n\r\n  res.sendFile(filePath, (error) => {\r\n    if (error) {\r\n      res.status(404).json({\r\n        status: \"error\",\r\n        error: \"Invalid session id or simulation not completed\"\r\n      })\r\n    }\r\n  })\r\n});\r\n\r\nroutes.get('/result/statistics/:sessionId', (req, res, next) => {\r\n  const sessionId = req.params.sessionId;\r\n  const ss = session.getSession(sessionId) || {status: \"error\", error: \"invalid session id\"};\r\n  if (ss.status !== 'completed') {\r\n    res.status(404).json(ss);\r\n    return;\r\n  }\r\n\r\n  const filePath = path.resolve(`logs/${sessionId}_statistics.txt`);\r\n\r\n  res.sendFile(filePath, (error) => {\r\n    if (error) {\r\n      res.status(404).json({\r\n        status: \"error\",\r\n        error: \"Invalid session id or simulation not completed\"\r\n      })\r\n    }\r\n  })\r\n});\r\n\r\nroutes.get('/result/log/:sessionId', (req, res, next) => {\r\n  const sessionId = req.params.sessionId;\r\n  const ss = session.getSession(sessionId) || {status: \"error\", error: \"invalid session id\"};\r\n  if (ss.status !== 'completed') {\r\n    res.status(404).json(ss);\r\n    return;\r\n  }\r\n\r\n  const filePath = path.resolve(`logs/${sessionId}_log.txt`);\r\n\r\n  res.sendFile(filePath, (error) => {\r\n    if (error) {\r\n      res.status(404).json({\r\n        status: \"error\",\r\n        error: \"Invalid session id or simulation not completed\"\r\n      })\r\n    }\r\n  })\r\n});\r\n\r\nroutes.get('/result/draw/:sessionId', (req, res, next) => {\r\n  const sessionId = req.params.sessionId;\r\n  const ss = session.getSession(sessionId) || {status: \"error\", error: \"invalid session id\"};\r\n  if (ss.status !== 'completed') {\r\n    res.status(404).json(ss);\r\n    return;\r\n  }\r\n\r\n  const filePath = path.resolve(`logs/${sessionId}_draw.txt`);\r\n\r\n  res.sendFile(filePath, (error) => {\r\n    if (error) {\r\n      res.status(404).json({\r\n        status: \"error\",\r\n        error: \"Invalid session id or simulation not completed\"\r\n      })\r\n    }\r\n  })\r\n});\r\n\r\nroutes.get('/result/event/:sessionId', (req, res, next) => {\r\n  const sessionId = req.params.sessionId;\r\n  const ss = session.getSession(sessionId) || {status: \"error\", error: \"invalid session id\"};\r\n  if (ss.status !== 'completed') {\r\n    res.status(404).json(ss);\r\n    return;\r\n  }\r\n\r\n  const filePath = path.resolve(`logs/${sessionId}_eventTrace.txt`);\r\n\r\n  res.sendFile(filePath, (error) => {\r\n    if (error) {\r\n      res.status(404).json({\r\n        status: \"error\",\r\n        error: \"Invalid session id or simulation not completed\"\r\n      })\r\n    }\r\n  })\r\n});\r\n\r\nroutes.get('/result/node/:sessionId', (req, res, next) => {\r\n  const sessionId = req.params.sessionId;\r\n  const filePath = path.resolve(`logs/${sessionId}_nodeTrace.txt`);\r\n  const ss = session.getSession(sessionId) || {status: \"error\", error: \"invalid session id\"};\r\n  if (ss.status !== 'completed') {\r\n    res.status(404).json(ss);\r\n    return;\r\n  }\r\n\r\n  fs.readFile(filePath, (err, data) => {\r\n    if (err) {\r\n      res.status(404).json({\r\n        status: \"error\",\r\n        error: \"Invalid session id or simulation not completed\"\r\n      })\r\n    } else {\r\n      const nodes = data\r\n        .toString()\r\n        .split('\\n')\r\n        .filter(_ => _ !== '')\r\n        .map(_ => JSON.parse(_));\r\n\r\n      res.json(nodes)\r\n    }\r\n  });\r\n});\r\n\r\nexport default routes;\r\n"]}